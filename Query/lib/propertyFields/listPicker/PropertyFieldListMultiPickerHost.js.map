{"version":3,"sources":["propertyFields/listPicker/PropertyFieldListMultiPickerHost.tsx"],"names":[],"mappings":"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","file":"propertyFields/listPicker/PropertyFieldListMultiPickerHost.js","sourcesContent":["import * as React from 'react';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport { IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\r\nimport { Spinner, SpinnerType } from 'office-ui-fabric-react/lib/Spinner';\r\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { IPropertyFieldListMultiPickerHostProps, IPropertyFieldListMultiPickerHostState } from './IPropertyFieldListMultiPickerHost';\r\nimport { ISPLists, ISPList } from './IPropertyFieldListPickerHost';\r\nimport SPListPickerService from '../../services/SPListPickerService';\r\nimport FieldErrorMessage from '../errorMessage/FieldErrorMessage';\r\n\r\n/**\r\n* Renders the controls for PropertyFieldSPListMultiplePicker component\r\n*/\r\nexport default class PropertyFieldListMultiPickerHost extends React.Component<IPropertyFieldListMultiPickerHostProps, IPropertyFieldListMultiPickerHostState> {\r\n  private options: IChoiceGroupOption[] = [];\r\n  private loaded: boolean = false;\r\n  private async: Async;\r\n  private delayedValidate: (value: string[]) => void;\r\n\r\n  /**\r\n  * Constructor\r\n  */\r\n  constructor(props: IPropertyFieldListMultiPickerHostProps) {\r\n    super(props);\r\n\r\n    this.onChanged = this.onChanged.bind(this);\r\n    this.state = {\r\n      results: this.options,\r\n      selectedKeys: [],\r\n      loaded: this.loaded,\r\n      errorMessage: ''\r\n    };\r\n\r\n    this.async = new Async(this);\r\n    this.validate = this.validate.bind(this);\r\n    this.notifyAfterValidate = this.notifyAfterValidate.bind(this);\r\n    this.delayedValidate = this.async.debounce(this.validate, this.props.deferredValidationTime);\r\n\r\n    this.loadLists();\r\n  }\r\n\r\n  /**\r\n  * Loads the list from SharePoint current web site\r\n  */\r\n  private loadLists(): void {\r\n    // Builds the SharePoint List service\r\n    const listService: SPListPickerService = new SPListPickerService(this.props, this.props.context);\r\n    // Gets the libs\r\n    listService.getLibs().then((response: ISPLists) => {\r\n      response.value.map((list: ISPList) => {\r\n        let isSelected: boolean = false;\r\n        let indexInExisting: number = -1;\r\n        // Defines if the current list must be selected by default\r\n        if (this.props.selectedLists) {\r\n          indexInExisting = this.props.selectedLists.indexOf(list.Id);\r\n        }\r\n\r\n        if (indexInExisting > -1) {\r\n          isSelected = true;\r\n          this.state.selectedKeys.push(list.Id);\r\n        }\r\n        // Add the option to the list\r\n        this.options.push({\r\n          key: list.Id,\r\n          text: list.Title,\r\n          checked: isSelected\r\n        });\r\n      });\r\n      this.loaded = true;\r\n      this.setState({ results: this.options, selectedKeys: this.state.selectedKeys, loaded: true });\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Raises when a list has been selected\r\n  */\r\n  private onChanged(element: React.FormEvent<HTMLElement>, isChecked: boolean): void {\r\n    if (element) {\r\n      const value: string = (element.currentTarget as any).value;\r\n      let selectedKeys = this.state.selectedKeys;\r\n      // Check if the element is selected\r\n      if (isChecked === false) {\r\n        // Remove the unselected item\r\n        selectedKeys = selectedKeys.filter(s => s !== value);\r\n      } else {\r\n        // Add the selected item and filter out the doubles\r\n        selectedKeys.push(value);\r\n        selectedKeys = selectedKeys.filter((item, pos, self) => {\r\n          return self.indexOf(item) == pos;\r\n        });\r\n      }\r\n      // Update the state and validate\r\n      this.setState({\r\n        selectedKeys: selectedKeys\r\n      });\r\n      this.delayedValidate(selectedKeys);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Validates the new custom field value\r\n  */\r\n  private validate(value: string[]): void {\r\n    if (this.props.onGetErrorMessage === null || typeof this.props.onGetErrorMessage === 'undefined') {\r\n      this.notifyAfterValidate(this.props.selectedLists, value);\r\n      return;\r\n    }\r\n\r\n    const result: string | PromiseLike<string> = this.props.onGetErrorMessage(value || []);\r\n    if (typeof result !== 'undefined') {\r\n      if (typeof result === 'string') {\r\n        if (result === '') {\r\n          this.notifyAfterValidate(this.props.selectedLists, value);\r\n        }\r\n        this.setState({\r\n          errorMessage: result\r\n        });\r\n      } else {\r\n        result.then((errorMessage: string) => {\r\n          if (typeof errorMessage === 'undefined' || errorMessage === '') {\r\n            this.notifyAfterValidate(this.props.selectedLists, value);\r\n          }\r\n          this.setState({\r\n            errorMessage: errorMessage\r\n          });\r\n        });\r\n      }\r\n    } else {\r\n      this.notifyAfterValidate(this.props.selectedLists, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Notifies the parent Web Part of a property value change\r\n  */\r\n  private notifyAfterValidate(oldValue: string[], newValue: string[]) {\r\n    if (this.props.onPropertyChange && newValue !== null) {\r\n      this.props.properties[this.props.targetProperty] = newValue;\r\n      this.props.onPropertyChange(this.props.targetProperty, oldValue, newValue);\r\n      // Trigger the apply button\r\n      if (typeof this.props.onChange !== 'undefined' && this.props.onChange !== null) {\r\n        this.props.onChange(this.props.targetProperty, newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Called when the component will unmount\r\n  */\r\n  public componentWillUnmount() {\r\n    this.async.dispose();\r\n  }\r\n\r\n  /**\r\n  * Renders the SPListMultiplePicker controls with Office UI  Fabric\r\n  */\r\n  public render(): JSX.Element {\r\n    if (this.loaded === false) {\r\n      return (\r\n        <div>\r\n          <Label>{this.props.label}</Label>\r\n          <Spinner type={SpinnerType.normal} />\r\n        </div>\r\n      );\r\n    } else {\r\n      const styleOfLabel: any = {\r\n        color: this.props.disabled === true ? '#A6A6A6' : 'auto'\r\n      };\r\n\r\n      // Renders content\r\n      return (\r\n        <div>\r\n          <Label>{this.props.label}</Label>\r\n          {\r\n            this.options.map((item: IChoiceGroupOption, index: number) => {\r\n              const uniqueKey = this.props.targetProperty + '-' + item.key;\r\n              return (\r\n                <div style={{ marginBottom: '5px' }} className='ms-ChoiceField' key={`${this.props.key}-multiplelistpicker-${index}`}>\r\n                  <Checkbox\r\n                    defaultChecked={item.checked}\r\n                    disabled={this.props.disabled}\r\n                    label={item.text}\r\n                    onChange={this.onChanged}\r\n                    inputProps={{ value: item.key }}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n          }\r\n\r\n          <FieldErrorMessage errorMessage={this.state.errorMessage} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}