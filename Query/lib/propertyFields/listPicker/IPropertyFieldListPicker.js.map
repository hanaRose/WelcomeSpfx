{"version":3,"sources":["propertyFields/listPicker/IPropertyFieldListPicker.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH,IAAY,8BAGX;AAHD,WAAY,8BAA8B;IACxC,+EAAM,CAAA;IACN,qFAAK,CAAA;AACP,CAAC,EAHW,8BAA8B,GAA9B,sCAA8B,KAA9B,sCAA8B,QAGzC","file":"propertyFields/listPicker/IPropertyFieldListPicker.js","sourcesContent":["import { IWebPartContext, IPropertyPaneCustomFieldProps } from '@microsoft/sp-webpart-base';\r\n\r\n/**\r\n * Enum for specifying how the lists should be sorted\r\n */\r\nexport enum PropertyFieldListPickerOrderBy {\r\n  Id = 1,\r\n  Title\r\n}\r\n\r\n/**\r\n * Public properties of the PropertyFieldListPicker custom field\r\n */\r\nexport interface IPropertyFieldListPickerProps {\r\n\r\n  /**\r\n   * Property field label displayed on top\r\n   */\r\n  label: string;\r\n  /**\r\n   * Context of the current web part\r\n   */\r\n  context: IWebPartContext;\r\n  /**\r\n   * Initial selected list set of the control\r\n   */\r\n  selectedList?: string | string[];\r\n  /**\r\n   * BaseTemplate ID of the lists or libaries you want to return.\r\n   */\r\n  baseTemplate?: number;\r\n  /**\r\n   * Specify if you want to include or exclude hidden lists. By default this is true.\r\n   */\r\n  includeHidden?: boolean;\r\n  /**\r\n   * Specify the property on which you want to order the retrieve set of lists.\r\n   */\r\n  orderBy?: PropertyFieldListPickerOrderBy;\r\n  /**\r\n   * Specify if you want to have a single or mult list selector.\r\n   */\r\n  multiSelect?: boolean;\r\n  /**\r\n   * Defines a onPropertyChange function to raise when the selected value changed.\r\n   * Normally this function must be always defined with the 'this.onPropertyChange'\r\n   * method of the web part object.\r\n   */\r\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\r\n  /**\r\n   * Parent Web Part properties\r\n   */\r\n  properties: any;\r\n  /**\r\n   * An UNIQUE key indicates the identity of this control\r\n   */\r\n  key?: string;\r\n  /**\r\n   * Whether the property pane field is enabled or not.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * The method is used to get the validation error message and determine whether the input value is valid or not.\r\n   *\r\n   *   When it returns string:\r\n   *   - If valid, it returns empty string.\r\n   *   - If invalid, it returns the error message string and the text field will\r\n   *     show a red border and show an error message below the text field.\r\n   *\r\n   *   When it returns Promise<string>:\r\n   *   - The resolved value is display as error message.\r\n   *   - The rejected, the value is thrown away.\r\n   *\r\n   */\r\n  onGetErrorMessage?: (value: string) => string | Promise<string>;\r\n  /**\r\n   * Custom Field will start to validate after users stop typing for `deferredValidationTime` milliseconds.\r\n   * Default value is 200.\r\n   */\r\n  deferredValidationTime?: number;\r\n}\r\n\r\n/**\r\n * Private properties of the PropertyFieldListPicker custom field.\r\n * We separate public & private properties to include onRender & onDispose method waited\r\n * by the PropertyFieldCustom, witout asking to the developer to add it when he's using\r\n * the PropertyFieldListPicker.\r\n *\r\n */\r\nexport interface IPropertyFieldListPickerPropsInternal extends IPropertyFieldListPickerProps, IPropertyPaneCustomFieldProps {\r\n\r\n  label: string;\r\n  targetProperty: string;\r\n  context: IWebPartContext;\r\n  selectedList?: string;\r\n  selectedLists?: string[];\r\n  baseTemplate?: number;\r\n  orderBy?: PropertyFieldListPickerOrderBy;\r\n  includeHidden?: boolean;\r\n  onPropertyChange(propertyPath: string, oldValue: any, newValue: any): void;\r\n  properties: any;\r\n  key: string;\r\n  disabled?: boolean;\r\n  onGetErrorMessage?: (value: string | string[]) => string | Promise<string>;\r\n  deferredValidationTime?: number;\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}