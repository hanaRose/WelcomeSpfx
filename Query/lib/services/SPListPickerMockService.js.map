{"version":3,"sources":["services/SPListPickerMockService.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH;IAAA;IAcA,CAAC;IARC;;OAEG;IACW,mCAAQ,GAAtB,UAAuB,OAAe,EAAE,OAAa;QACnD,MAAM,CAAC,IAAI,OAAO,CAAW,UAAC,OAAO;YACnC,OAAO,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAZD;;OAEG;IACY,mCAAQ,GAAa,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;IAUpD,iCAAC;CAdD,AAcC,IAAA;kBAdoB,0BAA0B","file":"services/SPListPickerMockService.js","sourcesContent":["import { ISPLists } from '../propertyFields/listPicker/IPropertyFieldListPickerHost';\r\n\r\n/**\r\n * Defines a http client to request mock data to use the web part with the local workbench\r\n */\r\nexport default class SPListPickerMockHttpClient {\r\n  /**\r\n   * Mock SharePoint result sample\r\n   */\r\n  private static _results: ISPLists = { value: [] };\r\n\r\n  /**\r\n   * Mock search People method\r\n   */\r\n  public static getLists(restUrl: string, options?: any): Promise<ISPLists> {\r\n    return new Promise<ISPLists>((resolve) => {\r\n      resolve(SPListPickerMockHttpClient._results);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\src"}